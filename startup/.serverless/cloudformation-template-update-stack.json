{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "AuthorizerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/eventconex-stg-authorizer"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "eventconex",
                  "stg",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/eventconex-stg*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/eventconex-stg*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "eventconex",
              "stg",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AuthorizerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/eventconex/stg/1712669240170-2024-04-09T13:27:20.170Z/eventconex.zip"
        },
        "Handler": "lambda/authorizer.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "eventconex-stg-authorizer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "API_KEY": "YR7bhB95K7PRIf8eJ8ccIiP1oOOUX74TAf6iT4TYO3gUvsVHfl"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AuthorizerLogGroup"
      ]
    },
    "AuthorizerLambdaVersionhaabv7wgjnnD1kwNHcFp9kPohy4Yi7KzS4TMl3YfPE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthorizerLambdaFunction"
        },
        "CodeSha256": "Lb1p2HeEzT8NjsX7VqyxxCOjvAr7XTab8itAshlXPo0="
      }
    },
    "EventConexHttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "EventConexHttpApi",
        "ProtocolType": "HTTP"
      }
    },
    "EventConexHttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "EventConexHttpApi"
        },
        "StageName": "stg",
        "AutoDeploy": true
      }
    },
    "EventConexHttpApiDeployment": {
      "Type": "AWS::ApiGatewayV2::Deployment",
      "Properties": {
        "ApiId": {
          "Ref": "EventConexHttpApi"
        },
        "StageName": {
          "Ref": "EventConexHttpApiStage"
        }
      }
    },
    "AuthorizerLambdaFunctionInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthorizerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "EventConexAuthorizer": {
      "Type": "AWS::ApiGatewayV2::Authorizer",
      "Properties": {
        "Name": "EventConexAuthorizer",
        "ApiId": {
          "Ref": "EventConexHttpApi"
        },
        "AuthorizerType": "REQUEST",
        "AuthorizerPayloadFormatVersion": "2.0",
        "EnableSimpleResponses": true,
        "IdentitySource": [
          "$request.header.X-API-Key"
        ],
        "AuthorizerUri": {
          "Fn::Sub": [
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations",
            {
              "LambdaArn": {
                "Fn::GetAtt": [
                  "AuthorizerLambdaFunction",
                  "Arn"
                ]
              }
            }
          ]
        }
      }
    },
    "HttpApiIdParameter": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "/eventconex/http-api-id",
        "Type": "String",
        "Value": {
          "Ref": "EventConexHttpApi"
        },
        "Description": "Id of the HTTP API"
      }
    },
    "AuthorizerIdParameter": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "/eventconex/authorizer-id",
        "Type": "String",
        "Value": {
          "Ref": "EventConexAuthorizer"
        },
        "Description": "Id of the Authorizer"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-eventconex-stg-ServerlessDeploymentBucketName"
      }
    },
    "AuthorizerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AuthorizerLambdaVersionhaabv7wgjnnD1kwNHcFp9kPohy4Yi7KzS4TMl3YfPE"
      },
      "Export": {
        "Name": "sls-eventconex-stg-AuthorizerLambdaFunctionQualifiedArn"
      }
    }
  }
}